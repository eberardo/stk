##################################################################################
# Population initialization function.
##################################################################################

init_func; init_random_cages;
bb_db=r'path1';
lk_db=r'path2';
topologies=[FourPlusSix]

##################################################################################
# Selection function for selecting the next generation.
##################################################################################

generational_select_func; stochastic_sampling; use_rank=True

##################################################################################
# Selection function for selecting parents.
##################################################################################

parent_select_func; crossover_roulette

##################################################################################
# Selection function for selecting molecules for mutation.
##################################################################################

mutant_select_func; stochastic_sampling; duplicates=True

##################################################################################
# Crossover function.
##################################################################################

crossover_func; bb_lk_exchange

##################################################################################
# Mutation function 1.
##################################################################################

mutation_func; cage_random_bb;
database='path1'

##################################################################################
# Mutation function 2.
##################################################################################

mutation_func; cage_random_lk;
database='path2'

##################################################################################
# When carrying mutations, chance that a given mutation function will be used.
##################################################################################

mutation_weights=[1/4,1/4,1/4,1/4]

##################################################################################
# Optimization function.
##################################################################################

opt_func; do_not_optimize

##################################################################################
# Fitness function.
##################################################################################

fitness_func; random_fitness_vector

##################################################################################
# Normalization functions.
##################################################################################

# First shift all energy values so that they are always positive.
normalization_func; shift_elements; indices=[-1]

# Second, make sure that the magnitudes of all fitness parameters
# are comparable.
normalization_func; magnitudes

##################################################################################
# Number of generations to create.
##################################################################################

num_generations=5

##################################################################################
# Number of mutation operations to perform each generation.
##################################################################################

num_mutations=2

##################################################################################
# Number of crossover/mating operations to perform each generation.
##################################################################################

num_crossovers=2

##################################################################################
# Size of the population.
##################################################################################

pop_size=5

comparison_pops = ['pop1', 'pop2']
