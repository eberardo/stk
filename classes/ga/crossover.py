"""
Defines crossover operations via the ``Crossover`` class.

Extending MMEA: Adding crossover functions.
-------------------------------------------
If a new crossover operation is to be added to MMEA it should be added
as a method in the ``Crossover`` class defined in this module. The only
requirements are that the first two arguments are ``macro_mol1`` and
``macro_mol2`` (excluding ``self`` or ``cls``) and that any offspring 
are returned in a ``Population`` instance.

The naming requirement of ``macro_mol1`` and ``macro_mol2`` exists to 
help users identify which arguments are handled automatically by MMEA 
and which they need to define in the input file. The convention is that 
if the crossover function takes arguments called  ``macro_mol1`` and
``macro_mol2`` they do not have to be specified in the input file.

If the crossover function does not fit neatly into a single function
make sure that any helper functions are private, ie that their names 
start with a leading underscore. 

"""

import os
from collections import Counter

from ..population import Population
from ..molecular import Cage
from ..exception import MolError
from ...plotting import plot_counter

class Crossover:
    """
    Carries out crossover operations on the population.
    
    Instances of the ``Population`` class delegate crossover operations 
    to instances of this class. They do this by calling:
        
        >>> offspring_pop = pop.gen_offspring()
        
    which returns a new population consisting of molecules generated by
    performing crossover operations on members of ``pop``. This class
    invokes an instance of the ``Selection`` class to select the
    parent pool. Both an instance of this class and the ``Selection``
    class are held in the `ga_tools` attribute of a ``Population`` 
    instance.
    
    This class is initialized with a ``FunctionData`` instance. The 
    object holds the name of the crossover function to be used by the
    population as well as any additional parameters the function may 
    require. Crossover functions should be defined as methods within 
    this class.
    
    Members of this class are also initialized with an integer which
    holds the number of crossover operations to be performed each
    generation.
    
    Attributes
    ----------
    func_data : FunctionData
        The ``FunctionData`` object holding the name of the function
        chosen for crossover and any additional paramters and 
        corresponding values the function may require.
    
    num_crossovers : int
        The number of crossover operations that need to be performed 
        each generation.
    
    n_calls : int
        The total number of times an instance of ``Crossover`` has been
        called during its lifetime.
    
    name : str
        A template string for naming ``MacroMolecule`` instances 
        produced via crossover.
        
    """
    
    
    def __init__(self, func_data, num_crossovers):
        self.func_data = func_data
        self.num_crossovers = num_crossovers
        self.n_calls = 0
        self.name = "crossover_{0}_topology_{1}_offspring_{2}.mol"
    
    def __call__(self, population):
        """
        Carries out crossover operations on the supplied population.
        
        This function selects members of the population and crosses them
        until either all possible parents have been crossed or the 
        required number of successful crossover operations has been 
        performed.
        
        The offspring generated are returned together in a 
        ``Population`` instance. Any molecules that are created via
        crossover and match a molecule present in the original 
        population are removed.
        
        Parameters
        ----------
        population : Population
            The population instance who's members are to crossed.  
            
        Returns
        -------
        Population
            A population with all the offspring generated held in the
            `members` attribute. This does not include offspring which
            correspond to molecules already present in `population`.
        
        """
                
        # Create the parent pool by using `select('crossover')`.
        parent_pool = population.select('crossover')
        offspring_pop = Population(population.ga_tools)
        counter = Counter()
        
        # Get the crossover function object using the name of the 
        # crossover function supplied during initialization of the 
        # ``Crossover`` instance.        
        func = getattr(self, self.func_data.name)
        
        # Keep a count of the number of successful crossovers.
        num_crossovers = 0
        for parents in parent_pool:
            counter.update(parents)
            try:
                self.n_calls += 1
                # Apply the crossover function and supply any additional
                # arguments to it.
                offspring = func(*parents, **self.func_data.params)
                
                # Add the new offspring to the offspring population.                
                offspring_pop.add_members(offspring)
                num_crossovers += 1
                print('Crossover number {0}. Finish when {1}.'.format(
                                num_crossovers, self.num_crossovers))
                if num_crossovers == self.num_crossovers:
                    break
            except Exception as ex:
                for i, parent in enumerate(parents):
                    MolError(ex, parent, 
                    'Error during crossover. Parent {0}.'.format(i))                
                
        # Make sure that only original molecules are left in the 
        # offspring population.
        offspring_pop -= population
        # Update counter with unselected members and plot counter.
        for member in population:
            if member not in counter.keys():
                counter.update({member : 0})
        plot_counter(counter, os.path.join(os.getcwd(), 
                              'crossover_counter.png'))
        return offspring_pop

    """
    The following crossover operations apply to ``Cage`` instances    
    
    """

    def bb_lk_exchange(self, macro_mol1, macro_mol2):
        """
        Exchanges the building-blocks* and linkers of cages.
        
        This operation is basically:
        
            bb1-lk1 + bb2-lk2 --> bb1-lk2 + bb2-lk1,
            
        where bb-lk represents a building-block* - linker combination
        of a cage.
        
        If the parent cages do not have the same topology the pair of 
        offspring are created for each topology. This means that there
        may be up to 4 offspring. 
        
        Parameters
        ----------
        macro_mol1 : Cage
            The first parent cage. Its building-block* and linker are
            combined with those of `cage2` to form new cages.
        
        macro_mol2 : Cage
            The second parent cage. Its building-block* and linker are
            combined with those of `cage1` to form new cages.
        
        Returns
        -------
        Population
            A population of all the offspring generated by crossover of
            `macro_mol1` with `macro_mol2`.
        
        """

        # Make a variable for each building-block* and linker of each
        # each cage. Make a set consisting of topologies of the cages
        # provided as arguments - this automatically removes copies.
        # For each topology create two offspring cages by combining the
        # building-block* of one cage with the linker of the other.
        # Place each new cage into a ``Population`` instance and return
        # that.
        
        _, c1_lk = max(zip(macro_mol1.topology.bb_counter.values(),
                        macro_mol1.topology.bb_counter.keys()))
        _, c1_bb = min(zip(macro_mol1.topology.bb_counter.values(),
                        macro_mol1.topology.bb_counter.keys()))
        
        _, c2_lk = max(zip(macro_mol2.topology.bb_counter.values(),
                        macro_mol2.topology.bb_counter.keys()))
        _, c2_bb = min(zip(macro_mol2.topology.bb_counter.values(),
                        macro_mol2.topology.bb_counter.keys()))
        
        # Get all the topologies. A set automatically removes 
        # duplicates.
        topologies = {type(x.topology) for x in 
                                              (macro_mol1, macro_mol2)}

        offspring_pop = Population()
        # For each topology create a new pair of offspring using the
        # building block pairings determined earlier.
        for index, topology in enumerate(topologies):
            offspring1 = Cage((c1_lk, c2_bb), topology, 
                              os.path.join(os.getcwd(),
                              self.name.format(self.n_calls, index, 1)))
                              
            offspring2 = Cage((c2_lk, c1_bb), topology,
                              os.path.join(os.getcwd(),
                              self.name.format(self.n_calls, index, 2)))
            offspring_pop.add_members((offspring1, offspring2))

        return offspring_pop